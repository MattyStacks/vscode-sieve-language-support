{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Sieve",
    "scopeName": "source.sieve",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#commands"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#identifiers"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.hash.sieve",
                    "begin": "#",
                    "end": "$",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.sieve"
                        }
                    }
                },
                {
                    "name": "comment.block.sieve",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.sieve"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.sieve",
                    "match": "\\b(if|elsif|else|require|stop)\\b"
                },
                {
                    "name": "keyword.operator.logical.sieve",
                    "match": "\\b(allof|anyof|not)\\b"
                },
                {
                    "name": "keyword.other.sieve",
                    "match": "\\b(text|raw)\\b"
                }
            ]
        },
        "commands": {
            "patterns": [
                {
                    "name": "entity.name.function.action.sieve",
                    "match": "\\b(keep|discard|redirect|fileinto|reject|vacation|notify|flag|addflag|removeflag|setflag)\\b"
                },
                {
                    "name": "entity.name.function.test.sieve",
                    "match": "\\b(address|allof|anyof|body|envelope|exists|false|header|not|size|true|date|currentdate|mailbox|mailboxexists|metadata|metadataexists|servermetadata|servermetadataexists|spamtest|virustest)\\b"
                },
                {
                    "name": "entity.name.function.comparator.sieve",
                    "match": "\\b(contains|is|over|under|matches|regex|count|value)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.sieve",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.sieve",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.multiline.sieve",
                    "begin": "text:",
                    "end": "^\\.$",
                    "contentName": "string.unquoted.heredoc.sieve"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.sieve",
                    "match": "\\b\\d+[KMG]?\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.comparison.sieve",
                    "match": "\\b(:comparator|:all|:localpart|:domain|:user|:detail|:contains|:is|:over|:under|:matches|:regex|:count|:value)\\b"
                },
                {
                    "name": "keyword.operator.modifier.sieve",
                    "match": "\\b(:copy|:create|:flags)\\b"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.parameter.sieve",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        }
    }
}
